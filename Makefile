# Copyright 2018-2021 VMware, Inc.
# SPDX-License-Identifier: Apache-2.0

.DEFAULT_GOAL := release

TARGET_ARCH :=

# Determine the platform we are compiling on.
UNAME_S := $(shell uname -s)
ifeq ($(UNAME_S),Linux)
    PLATFORM := linux
else ifeq ($(UNAME_S),Darwin)
    PLATFORM := macOSX
    TARGET_ARCH := -arch x86_64
else
    PLATFORM := linux
endif


#*************************************************************#
# DIRECTORIES, SRC, OBJ, ETC
#

SRCDIR   = src
TESTSDIR = tests
OBJDIR   = obj
BINDIR   = bin

SRC := $(shell find $(SRCDIR) -name "*.c")
TESTSRC := $(shell find $(TESTSDIR) -name "*.c")

OBJ := $(SRC:%.c=$(OBJDIR)/%.o)
TESTOBJ= $(TESTSRC:%.c=$(OBJDIR)/%.o)

# Automatically create directories, based on
# http://ismail.badawi.io/blog/2017/03/28/automatic-directory-creation-in-make/
.SECONDEXPANSION:

.PRECIOUS: $(OBJDIR)/%/.

$(OBJDIR)/. $(BINDIR)/.:
	mkdir -p $@

$(OBJDIR)/%/. $(BINDIR)/%/.:
	mkdir -p $@

#*************************************************************#
# CFLAGS, ETC
#

INCLUDE = -I $(SRCDIR) -I $(SRCDIR)/platform_$(PLATFORM)

#######BEGIN libconfig
# Get output of `pkg-config --{cflags|libs} libconfig` every time we run make,
# but if the pkg-config call fails we need to quit make.
libconfig_cflags := $(shell pkg-config --cflags libconfig)
libconfig_libs := $(shell pkg-config --libs libconfig)

.PHONY: .libconfig.mk
.libconfig.mk:
	@rm -f $@
	@echo "# Generated by Makefile for platform" $(PLATFORM) >> $@

	@echo "LIBCONFIG_CFLAGS = "$(libconfig_cflags) >> $@
	@echo "LIBCONFIG_LIBS = "$(libconfig_libs) >> $@
include .libconfig.mk
#######END libconfig

# Linux and Mac/OSX use these default cflags:
DEFAULT_CFLAGS += -D_GNU_SOURCE -Wall -Wfatal-errors

ifeq (Platform, Linux)
    DEFAULT_CFLAGS += -ggdb3 -pthread -Werror
endif

DEFAULT_CFLAGS += -msse4.2 -mpopcnt -DXXH_STATIC_LINKING_ONLY -fPIC
#DEFAULT_CFLAGS += -fsanitize=memory -fsanitize-memory-track-origins
#DEFAULT_CFLAGS += -fsanitize=address
#DEFAULT_CFLAGS += -fsanitize=integer
DEFAULT_CFLAGS += $(LIBCONFIG_CFLAGS)


$(info    PLATFORM is $(PLATFORM))

# Default Mac/OSX flags / args are minimal
DEFAULT_LDFLAGS :=
OPT_C_LDFLAGS :=
OPT_LIBS_FLAGS :=

# Platform-specific extra args needed for cc / ld commands
PF_EXTRA_ARGS :=

# For Linux compiles, we need few more arguments
ifeq ($(PLATFORM),linux)
    DEFAULT_LDFLAGS := -ggdb3 -pthread
    OPT_C_LDFLAGS := -Ofast -flto
    OPT_LIBS_FLAGS := -lm -lpthread -laio
    PF_EXTRA_ARGS := -shared
else
    # Mac/OSX: Specify library path for diff system include headers
    MacSDKs := /Library/Developer/CommandLineTools/SDKs/MacOSX.sdk
    OPT_LIBS_FLAGS := -L $(MacSDKs)/usr/lib -L /usr/local/opt/xxhash/lib -lSystem
    PF_EXTRA_ARGS := -dylib -arch i386 -macosx_version_min 11.0 -weak_reference_mismatches non-weak
    INCLUDE += -I $(MacSDKs)/usr/include -I $(MacSDKs)/usr/include/sys
endif

CFLAGS += $(DEFAULT_CFLAGS) $(OPT_C_LDFLAGS) -march=native
LDFLAGS = $(DEFAULT_LDFLAGS) $(OPT_C_LDFLAGS)
LIBS = $(OPT_LIBS_FLAGS) -lxxhash $(LIBCONFIG_LIBS)

#*********************************************************#
# Targets to track whether we have a release or debug build
#

all: $(BINDIR)/splinterdb.so $(BINDIR)/driver_test

release: .release all
	rm -f .debug
	rm -f .debug-log

debug: CFLAGS = -g -DSPLINTER_DEBUG $(DEFAULT_CFLAGS)
debug: LDFLAGS = -g $(DEFAULT_LDFLAGS)
debug: .debug all
	rm -f .release
	rm -f .debug-log

debug-log: CFLAGS = -g -DDEBUG -DCC_LOG $(DEFAULT_CFLAGS)
debug-log: LDFLAGS = -g $(DEFAULT_LDFLAGS)
debug-log: .debug-log all
	rm -f .release
	rm -f .debug

.release:
	$(MAKE) clean
	touch .release

.debug:
	$(MAKE) clean
	touch .debug

.debug-log:
	$(MAKE) clean
	touch .debug-log


#*************************************************************#
# RECIPES
#

$(BINDIR)/driver_test : $(TESTOBJ) $(BINDIR)/splinterdb.so | $$(@D)/.
	$(LD) $(LDFLAGS) -o $@ $^ $(LIBS)

# $(BINDIR)/splinterdb.so : $(OBJ) | $$(@D)/.
# 	$(LD) $(LDFLAGS) -dylib -arch i386 -macosx_version_min 11.0 -weak_reference_mismatches non-weak  -o $@ $^ $(LIBS) $(TARGET_ARCH) -L /Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/lib -L /usr/local/opt/xxhash/lib -lSystem

	# $(LD) $(LDFLAGS) -shared -o $@ $^ $(LIBS)
$(BINDIR)/splinterdb.so : $(OBJ) | $$(@D)/.
	$(LD) $(LDFLAGS) $(PF_EXTRA_ARGS) -o $@ $^ $(TARGET_ARCH) $(LIBS)

DEPFLAGS = -MMD -MT $@ -MP -MF $(OBJDIR)/$*.d

COMPILE.c = $(CC) $(DEPFLAGS) $(CFLAGS) $(INCLUDE) $(TARGET_ARCH) -c

$(OBJDIR)/%.o: %.c | $$(@D)/.
	$(COMPILE.c) $< -o $@

-include $(SRC:%.c=$(OBJDIR)/%.d) $(TESTSRC:%.c=$(OBJDIR)/%.d)

#*************************************************************#

.PHONY : clean tags
clean :
	rm -rf $(OBJDIR)/*
	rm -f $(BINDIR)/*

tags:
	ctags -R src


#*************************************************************#
# Testing
#

.PHONY: test install

test: $(BINDIR)/driver_test
	./test.sh

INSTALL_PATH ?= /usr/local

install: $(BINDIR)/splinterdb.so
	mkdir -p $(INSTALL_PATH)/include/splinterdb $(INSTALL_PATH)/lib
	cp $(BINDIR)/splinterdb.so $(INSTALL_PATH)/lib/libsplinterdb.so
	cp $(SRCDIR)/data.h $(SRCDIR)/platform_public.h $(SRCDIR)/kvstore.h $(SRCDIR)/kvstore_basic.h $(INSTALL_PATH)/include/splinterdb/
